"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),MeshTriangleWrapper=require("../../generated/shape_msgs/shape_msgs__msg__MeshTriangle.js"),PointWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__Point.js"),MeshRefStruct=StructType({triangles:MeshTriangleWrapper.refObjectArrayType,vertices:PointWrapper.refObjectArrayType}),MeshRefArray=ArrayType(MeshRefStruct),MeshRefStructArray=StructType({data:MeshRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class MeshWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new MeshRefStruct(e._refObject.toObject()),this._wrapperFields.triangles=MeshTriangleWrapper.createArray(),this._wrapperFields.triangles.copy(e._wrapperFields.triangles),this._wrapperFields.vertices=PointWrapper.createArray(),this._wrapperFields.vertices.copy(e._wrapperFields.vertices)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new MeshRefStruct,this._wrapperFields.triangles=MeshTriangleWrapper.createArray(),this._wrapperFields.vertices=PointWrapper.createArray()}static createFromRefObject(e){let r=new MeshWrapper;return r.copyRefObject(e),r}static createArray(){return new MeshArrayWrapper}static get ArrayType(){return MeshArrayWrapper}static get refObjectArrayType(){return MeshRefStructArray}static get refObjectType(){return MeshRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.triangles.fill([]),this._wrapperFields.triangles.freeze(e),this._refObject.triangles=this._wrapperFields.triangles.refObject,e&&this._wrapperFields.vertices.fill([]),this._wrapperFields.vertices.freeze(e),this._refObject.vertices=this._wrapperFields.vertices.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.triangles.copyRefObject(e.triangles),this._wrapperFields.vertices.copyRefObject(e.vertices)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){0!=e.triangles.size&&(MeshTriangleWrapper.ArrayType.freeArray(e.triangles),MeshTriangleWrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.triangles,MeshTriangleWrapper.refObjectArrayType,"data")),0!=e.vertices.size&&(PointWrapper.ArrayType.freeArray(e.vertices),PointWrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.vertices,PointWrapper.refObjectArrayType,"data"))}static destoryRawROS(e){MeshWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"shape_msgs",subFolder:"msg",interfaceName:"Mesh"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get triangles(){return this._wrapperFields.triangles}set triangles(e){this._wrapperFields.triangles.fill(e)}get vertices(){return this._wrapperFields.vertices}set vertices(e){this._wrapperFields.vertices.fill(e)}copyRefObject(e){this._refObject=new MeshRefStruct(e.toObject()),this._wrapperFields.triangles.copyRefObject(this._refObject.triangles),this._wrapperFields.vertices.copyRefObject(this._refObject.vertices)}copy(e){this._refObject=new MeshRefStruct(e._refObject.toObject()),this._wrapperFields.triangles.copy(e._wrapperFields.triangles),this._wrapperFields.vertices.copy(e._wrapperFields.vertices)}static get classType(){return MeshWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"triangles",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:"shape_msgs",type:"MeshTriangle",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"vertices",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:"geometry_msgs",type:"Point",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"shape_msgs",type:"Mesh",stringUpperBound:null,isPrimitiveType:!1},msgName:"Mesh"}}hasMember(e){return-1!==["triangles","vertices"].indexOf(e)}}class MeshArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof MeshWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new MeshWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MeshArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MeshArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new MeshRefArray(e),this._refObject=new MeshRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new MeshWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof MeshArrayWrapper))throw new TypeError('Invalid argument: should provide "MeshArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)MeshWrapper.freeStruct(r[t])}static get elementType(){return MeshWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return MeshArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=MeshWrapper;