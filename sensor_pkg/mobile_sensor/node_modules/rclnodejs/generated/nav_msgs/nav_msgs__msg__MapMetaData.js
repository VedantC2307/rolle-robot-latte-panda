"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),TimeWrapper=require("../../generated/builtin_interfaces/builtin_interfaces__msg__Time.js"),PoseWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__Pose.js"),MapMetaDataRefStruct=StructType({map_load_time:TimeWrapper.refObjectType,resolution:primitiveTypes.float32,width:primitiveTypes.uint32,height:primitiveTypes.uint32,origin:PoseWrapper.refObjectType}),MapMetaDataRefArray=ArrayType(MapMetaDataRefStruct),MapMetaDataRefStructArray=StructType({data:MapMetaDataRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class MapMetaDataWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new MapMetaDataRefStruct(e._refObject.toObject()),this._wrapperFields.map_load_time=new TimeWrapper(e._wrapperFields.map_load_time),this._wrapperFields.origin=new PoseWrapper(e._wrapperFields.origin)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new MapMetaDataRefStruct,this._wrapperFields.map_load_time=new TimeWrapper,this._wrapperFields.origin=new PoseWrapper}static createFromRefObject(e){let r=new MapMetaDataWrapper;return r.copyRefObject(e),r}static createArray(){return new MapMetaDataArrayWrapper}static get ArrayType(){return MapMetaDataArrayWrapper}static get refObjectArrayType(){return MapMetaDataRefStructArray}static get refObjectType(){return MapMetaDataRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._wrapperFields.map_load_time.freeze(e),this._refObject.map_load_time=this._wrapperFields.map_load_time.refObject,this._wrapperFields.origin.freeze(e),this._refObject.origin=this._wrapperFields.origin.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.map_load_time.copyRefObject(e.map_load_time),this._refObject.resolution=e.resolution,this._refObject.width=e.width,this._refObject.height=e.height,this._wrapperFields.origin.copyRefObject(e.origin)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){TimeWrapper.freeStruct(e.map_load_time),PoseWrapper.freeStruct(e.origin)}static destoryRawROS(e){MapMetaDataWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"nav_msgs",subFolder:"msg",interfaceName:"MapMetaData"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get map_load_time(){return this._wrapperFields.map_load_time}set map_load_time(e){e instanceof TimeWrapper?this._wrapperFields.map_load_time.copy(e):this._wrapperFields.map_load_time.copy(new TimeWrapper(e))}get resolution(){return this._refObject.resolution}set resolution(e){this._refObject.resolution=e}get width(){return this._refObject.width}set width(e){this._refObject.width=e}get height(){return this._refObject.height}set height(e){this._refObject.height=e}get origin(){return this._wrapperFields.origin}set origin(e){e instanceof PoseWrapper?this._wrapperFields.origin.copy(e):this._wrapperFields.origin.copy(new PoseWrapper(e))}copyRefObject(e){this._refObject=new MapMetaDataRefStruct(e.toObject()),this._wrapperFields.map_load_time.copyRefObject(this._refObject.map_load_time),this._wrapperFields.origin.copyRefObject(this._refObject.origin)}copy(e){this._refObject=new MapMetaDataRefStruct(e._refObject.toObject()),this._wrapperFields.map_load_time.copy(e._wrapperFields.map_load_time),this._wrapperFields.origin.copy(e._wrapperFields.origin)}static get classType(){return MapMetaDataWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"map_load_time",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"builtin_interfaces",type:"Time",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"resolution",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"width",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"height",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint32",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"origin",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"Pose",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"nav_msgs",type:"MapMetaData",stringUpperBound:null,isPrimitiveType:!1},msgName:"MapMetaData"}}hasMember(e){return-1!==["map_load_time","resolution","width","height","origin"].indexOf(e)}}class MapMetaDataArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof MapMetaDataWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new MapMetaDataWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MapMetaDataArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MapMetaDataArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new MapMetaDataRefArray(e),this._refObject=new MapMetaDataRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new MapMetaDataWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof MapMetaDataArrayWrapper))throw new TypeError('Invalid argument: should provide "MapMetaDataArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)MapMetaDataWrapper.freeStruct(r[t])}static get elementType(){return MapMetaDataWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return MapMetaDataArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=MapMetaDataWrapper;