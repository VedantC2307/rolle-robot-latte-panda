"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),TwistWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__Twist.js"),Float64Wrapper=require("../../generated/std_msgs/std_msgs__msg__Float64.js"),TwistWithCovarianceRefStruct=StructType({twist:TwistWrapper.refObjectType,covariance:ArrayType(primitiveTypes.float64,36)}),TwistWithCovarianceRefArray=ArrayType(TwistWithCovarianceRefStruct),TwistWithCovarianceRefStructArray=StructType({data:TwistWithCovarianceRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class TwistWithCovarianceWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new TwistWithCovarianceRefStruct(e._refObject.toObject()),this._wrapperFields.twist=new TwistWrapper(e._wrapperFields.twist),this._wrapperFields.covariance=Float64Wrapper.createArray(),this._wrapperFields.covariance.copy(e._wrapperFields.covariance)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new TwistWithCovarianceRefStruct,this._wrapperFields.twist=new TwistWrapper,this._wrapperFields.covariance=Float64Wrapper.createArray()}static createFromRefObject(e){let r=new TwistWithCovarianceWrapper;return r.copyRefObject(e),r}static createArray(){return new TwistWithCovarianceArrayWrapper}static get ArrayType(){return TwistWithCovarianceArrayWrapper}static get refObjectArrayType(){return TwistWithCovarianceRefStructArray}static get refObjectType(){return TwistWithCovarianceRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._wrapperFields.twist.freeze(e),this._refObject.twist=this._wrapperFields.twist.refObject,this._refObject.covariance=Array.from(this._wrapperFields.covariance.data)}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.twist.copyRefObject(e.twist),this._wrapperFields.covariance.fill(e.covariance.toArray())}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){TwistWrapper.freeStruct(e.twist)}static destoryRawROS(e){TwistWithCovarianceWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"geometry_msgs",subFolder:"msg",interfaceName:"TwistWithCovariance"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get twist(){return this._wrapperFields.twist}set twist(e){e instanceof TwistWrapper?this._wrapperFields.twist.copy(e):this._wrapperFields.twist.copy(new TwistWrapper(e))}get covariance(){return this._wrapperFields.covariance.data}set covariance(e){if(36!==e.length)throw new RangeError("The length of the array must be 36.");this._wrapperFields.covariance.fill(e)}copyRefObject(e){this._refObject=new TwistWithCovarianceRefStruct(e.toObject()),this._wrapperFields.twist.copyRefObject(this._refObject.twist),this._wrapperFields.covariance.fill(e.covariance.toArray())}copy(e){this._refObject=new TwistWithCovarianceRefStruct(e._refObject.toObject()),this._wrapperFields.twist.copy(e._wrapperFields.twist),this._wrapperFields.covariance.copy(e._wrapperFields.covariance)}static get classType(){return TwistWithCovarianceWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"twist",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"Twist",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"covariance",type:{isArray:!0,arraySize:36,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!0,pkgName:null,type:"float64",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"geometry_msgs",type:"TwistWithCovariance",stringUpperBound:null,isPrimitiveType:!1},msgName:"TwistWithCovariance"}}hasMember(e){return-1!==["twist","covariance"].indexOf(e)}}class TwistWithCovarianceArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof TwistWithCovarianceWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new TwistWithCovarianceWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to TwistWithCovarianceArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to TwistWithCovarianceArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new TwistWithCovarianceRefArray(e),this._refObject=new TwistWithCovarianceRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new TwistWithCovarianceWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof TwistWithCovarianceArrayWrapper))throw new TypeError('Invalid argument: should provide "TwistWithCovarianceArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)TwistWithCovarianceWrapper.freeStruct(r[t])}static get elementType(){return TwistWithCovarianceWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return TwistWithCovarianceArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=TwistWithCovarianceWrapper;