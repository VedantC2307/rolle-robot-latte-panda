"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),PoseWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__Pose.js"),ParticleRefStruct=StructType({pose:PoseWrapper.refObjectType,weight:primitiveTypes.float64}),ParticleRefArray=ArrayType(ParticleRefStruct),ParticleRefStructArray=StructType({data:ParticleRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class ParticleWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new ParticleRefStruct(e._refObject.toObject()),this._wrapperFields.pose=new PoseWrapper(e._wrapperFields.pose)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new ParticleRefStruct,this._wrapperFields.pose=new PoseWrapper}static createFromRefObject(e){let r=new ParticleWrapper;return r.copyRefObject(e),r}static createArray(){return new ParticleArrayWrapper}static get ArrayType(){return ParticleArrayWrapper}static get refObjectArrayType(){return ParticleRefStructArray}static get refObjectType(){return ParticleRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._wrapperFields.pose.freeze(e),this._refObject.pose=this._wrapperFields.pose.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.pose.copyRefObject(e.pose),this._refObject.weight=e.weight}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){PoseWrapper.freeStruct(e.pose)}static destoryRawROS(e){ParticleWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"nav2_msgs",subFolder:"msg",interfaceName:"Particle"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get pose(){return this._wrapperFields.pose}set pose(e){e instanceof PoseWrapper?this._wrapperFields.pose.copy(e):this._wrapperFields.pose.copy(new PoseWrapper(e))}get weight(){return this._refObject.weight}set weight(e){this._refObject.weight=e}copyRefObject(e){this._refObject=new ParticleRefStruct(e.toObject()),this._wrapperFields.pose.copyRefObject(this._refObject.pose)}copy(e){this._refObject=new ParticleRefStruct(e._refObject.toObject()),this._wrapperFields.pose.copy(e._wrapperFields.pose)}static get classType(){return ParticleWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"pose",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"Pose",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"weight",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"float64",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"nav2_msgs",type:"Particle",stringUpperBound:null,isPrimitiveType:!1},msgName:"Particle"}}hasMember(e){return-1!==["pose","weight"].indexOf(e)}}class ParticleArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof ParticleWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new ParticleWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to ParticleArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to ParticleArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new ParticleRefArray(e),this._refObject=new ParticleRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new ParticleWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof ParticleArrayWrapper))throw new TypeError('Invalid argument: should provide "ParticleArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)ParticleWrapper.freeStruct(r[t])}static get elementType(){return ParticleWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return ParticleArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=ParticleWrapper;