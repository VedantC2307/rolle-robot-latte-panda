"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),StringWrapper=require("../../generated/std_msgs/std_msgs__msg__String.js"),DiagnosticStatusWrapper=require("../../generated/diagnostic_msgs/diagnostic_msgs__msg__DiagnosticStatus.js"),SelfTest_ResponseRefStruct=StructType({id:primitiveTypes.string,passed:primitiveTypes.byte,status:DiagnosticStatusWrapper.refObjectArrayType}),SelfTest_ResponseRefArray=ArrayType(SelfTest_ResponseRefStruct),SelfTest_ResponseRefStructArray=StructType({data:SelfTest_ResponseRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class SelfTest_ResponseWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new SelfTest_ResponseRefStruct(e._refObject.toObject()),this._wrapperFields.id=new StringWrapper(e._wrapperFields.id),this._wrapperFields.status=DiagnosticStatusWrapper.createArray(),this._wrapperFields.status.copy(e._wrapperFields.status)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new SelfTest_ResponseRefStruct,this._wrapperFields.id=new StringWrapper,this._wrapperFields.status=DiagnosticStatusWrapper.createArray()}static createFromRefObject(e){let t=new SelfTest_ResponseWrapper;return t.copyRefObject(e),t}static createArray(){return new SelfTest_ResponseArrayWrapper}static get ArrayType(){return SelfTest_ResponseArrayWrapper}static get refObjectArrayType(){return SelfTest_ResponseRefStructArray}static get refObjectType(){return SelfTest_ResponseRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.id.freeze(e),this._refObject.id=this._wrapperFields.id.refObject,e&&this._wrapperFields.status.fill([]),this._wrapperFields.status.freeze(e),this._refObject.status=this._wrapperFields.status.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.id.data=e.id.data,this._refObject.passed=e.passed,this._wrapperFields.status.copyRefObject(e.status)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){StringWrapper.freeStruct(e.id),0!=e.status.size&&(DiagnosticStatusWrapper.ArrayType.freeArray(e.status),DiagnosticStatusWrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.status,DiagnosticStatusWrapper.refObjectArrayType,"data"))}static destoryRawROS(e){SelfTest_ResponseWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"diagnostic_msgs",subFolder:"srv",interfaceName:"SelfTest_Response"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get id(){return this._wrapperFields.id.data}set id(e){this._wrapperFields.id.data=e}get passed(){return this._refObject.passed}set passed(e){this._refObject.passed=e}get status(){return this._wrapperFields.status}set status(e){this._wrapperFields.status.fill(e)}copyRefObject(e){this._refObject=new SelfTest_ResponseRefStruct(e.toObject()),this._wrapperFields.id.copyRefObject(this._refObject.id),this._wrapperFields.status.copyRefObject(this._refObject.status)}copy(e){this._refObject=new SelfTest_ResponseRefStruct(e._refObject.toObject()),this._wrapperFields.id.copy(e._wrapperFields.id),this._wrapperFields.status.copy(e._wrapperFields.status)}static get classType(){return SelfTest_ResponseWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"id",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"string",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"passed",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"byte",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"status",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:"diagnostic_msgs",type:"DiagnosticStatus",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"diagnostic_msgs",type:"SelfTest_Response",stringUpperBound:null,isPrimitiveType:!1},msgName:"SelfTest_Response"}}hasMember(e){return-1!==["id","passed","status"].indexOf(e)}}class SelfTest_ResponseArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const t=e.length;this._resize(t),e.forEach(((e,t)=>{e instanceof SelfTest_ResponseWrapper?this._wrappers[t].copy(e):this._wrappers[t]=new SelfTest_ResponseWrapper(e)}))}freeze(e){this._wrappers.forEach(((t,r)=>{t.freeze(e),this._refArray[r]=t.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SelfTest_ResponseArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SelfTest_ResponseArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new SelfTest_ResponseRefArray(e),this._refObject=new SelfTest_ResponseRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let t=0;t<e;t++)this._wrappers.push(new SelfTest_ResponseWrapper)}copyRefObject(e){this._refObject=e;let t=this._refObject.data;t.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(t[e])}copy(e){if(!(e instanceof SelfTest_ResponseArrayWrapper))throw new TypeError('Invalid argument: should provide "SelfTest_ResponseArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,t)=>{this._wrappers[t].copy(e)}))}static freeArray(e){let t=e.data;t.length=e.size;for(let r=0;r<e.size;r++)SelfTest_ResponseWrapper.freeStruct(t[r])}static get elementType(){return SelfTest_ResponseWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return SelfTest_ResponseArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=SelfTest_ResponseWrapper;