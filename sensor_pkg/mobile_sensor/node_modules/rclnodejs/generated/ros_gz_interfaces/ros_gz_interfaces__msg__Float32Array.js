"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),Float32Wrapper=require("../../generated/std_msgs/std_msgs__msg__Float32.js"),Float32ArrayRefStruct=StructType({data:Float32Wrapper.refObjectArrayType}),Float32ArrayRefArray=ArrayType(Float32ArrayRefStruct),Float32ArrayRefStructArray=StructType({data:Float32ArrayRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class Float32ArrayWrapper{constructor(r){this._initialize(),this._setDefaults(),"object"==typeof r&&r._refObject?(this._refObject=new Float32ArrayRefStruct(r._refObject.toObject()),this._wrapperFields.data=Float32Wrapper.createArray(),this._wrapperFields.data.copy(r._wrapperFields.data)):void 0!==r&&translator.constructFromPlanObject(this,r),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new Float32ArrayRefStruct,this._wrapperFields.data=Float32Wrapper.createArray()}static createFromRefObject(r){let e=new Float32ArrayWrapper;return e.copyRefObject(r),e}static createArray(){return new Float32ArrayArrayWrapper}static get ArrayType(){return Float32ArrayArrayWrapper}static get refObjectArrayType(){return Float32ArrayRefStructArray}static get refObjectType(){return Float32ArrayRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(r){r&&this._wrapperFields.data.fill(Float32Array.from([])),this._wrapperFields.data.freeze(r),this._refObject.data=this._wrapperFields.data.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(r){this._wrapperFields.data.copyRefObject(r.data)}toPlainObject(r){return translator.toPlainObject(this,r)}static freeStruct(r){0!=r.data.size&&(Float32Wrapper.ArrayType.freeArray(r.data),Float32Wrapper.ArrayType.useTypedArray||deallocator.freeStructMember(r.data,Float32Wrapper.refObjectArrayType,"data"))}static destoryRawROS(r){Float32ArrayWrapper.freeStruct(r.refObject)}static type(){return{pkgName:"ros_gz_interfaces",subFolder:"msg",interfaceName:"Float32Array"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get data(){return this._wrapperFields.data.data}set data(r){this._wrapperFields.data.fill(r)}copyRefObject(r){this._refObject=new Float32ArrayRefStruct(r.toObject()),this._wrapperFields.data.copyRefObject(this._refObject.data)}copy(r){this._refObject=new Float32ArrayRefStruct(r._refObject.toObject()),this._wrapperFields.data.copy(r._wrapperFields.data)}static get classType(){return Float32ArrayWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"data",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"ros_gz_interfaces",type:"Float32Array",stringUpperBound:null,isPrimitiveType:!1},msgName:"Float32Array"}}hasMember(r){return-1!==["data"].indexOf(r)}}class Float32ArrayArrayWrapper{constructor(r=0){this._resize(r)}toRawROS(){return this._refObject.ref()}fill(r){const e=r.length;this._resize(e),r.forEach(((r,e)=>{r instanceof Float32ArrayWrapper?this._wrappers[e].copy(r):this._wrappers[e]=new Float32ArrayWrapper(r)}))}freeze(r){this._wrappers.forEach(((e,t)=>{e.freeze(r),this._refArray[t]=e.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to Float32ArrayArrayWrapper.size setter");return this._resize(r)}get capacity(){return this._wrappers.length}set capacity(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to Float32ArrayArrayWrapper.capacity setter");return this._resize(r)}get refObject(){return this._refObject}_resize(r){if(r<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new Float32ArrayRefArray(r),this._refObject=new Float32ArrayRefStructArray,this._refObject.size=r,this._refObject.capacity=r,this._wrappers=new Array;for(let e=0;e<r;e++)this._wrappers.push(new Float32ArrayWrapper)}copyRefObject(r){this._refObject=r;let e=this._refObject.data;e.length=this._refObject.size,this._resize(this._refObject.size);for(let r=0;r<this._refObject.size;r++)this._wrappers[r].copyRefObject(e[r])}copy(r){if(!(r instanceof Float32ArrayArrayWrapper))throw new TypeError('Invalid argument: should provide "Float32ArrayArrayWrapper".');this._resize(r.size),r._wrappers.forEach(((r,e)=>{this._wrappers[e].copy(r)}))}static freeArray(r){let e=r.data;e.length=r.size;for(let t=0;t<r.size;t++)Float32ArrayWrapper.freeStruct(e[t])}static get elementType(){return Float32ArrayWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return Float32ArrayArrayWrapper}toPlainObject(r){return translator.toPlainObject(this,r)}}module.exports=Float32ArrayWrapper;