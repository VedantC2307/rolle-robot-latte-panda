"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),Vector3Wrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__Vector3.js"),QuaternionWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__Quaternion.js"),TransformRefStruct=StructType({translation:Vector3Wrapper.refObjectType,rotation:QuaternionWrapper.refObjectType}),TransformRefArray=ArrayType(TransformRefStruct),TransformRefStructArray=StructType({data:TransformRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class TransformWrapper{constructor(r){this._initialize(),this._setDefaults(),"object"==typeof r&&r._refObject?(this._refObject=new TransformRefStruct(r._refObject.toObject()),this._wrapperFields.translation=new Vector3Wrapper(r._wrapperFields.translation),this._wrapperFields.rotation=new QuaternionWrapper(r._wrapperFields.rotation)):void 0!==r&&translator.constructFromPlanObject(this,r),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new TransformRefStruct,this._wrapperFields.translation=new Vector3Wrapper,this._wrapperFields.rotation=new QuaternionWrapper}static createFromRefObject(r){let e=new TransformWrapper;return e.copyRefObject(r),e}static createArray(){return new TransformArrayWrapper}static get ArrayType(){return TransformArrayWrapper}static get refObjectArrayType(){return TransformRefStructArray}static get refObjectType(){return TransformRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(r){this._wrapperFields.translation.freeze(r),this._refObject.translation=this._wrapperFields.translation.refObject,this._wrapperFields.rotation.freeze(r),this._refObject.rotation=this._wrapperFields.rotation.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(r){this._wrapperFields.translation.copyRefObject(r.translation),this._wrapperFields.rotation.copyRefObject(r.rotation)}toPlainObject(r){return translator.toPlainObject(this,r)}static freeStruct(r){Vector3Wrapper.freeStruct(r.translation),QuaternionWrapper.freeStruct(r.rotation)}static destoryRawROS(r){TransformWrapper.freeStruct(r.refObject)}static type(){return{pkgName:"geometry_msgs",subFolder:"msg",interfaceName:"Transform"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get translation(){return this._wrapperFields.translation}set translation(r){r instanceof Vector3Wrapper?this._wrapperFields.translation.copy(r):this._wrapperFields.translation.copy(new Vector3Wrapper(r))}get rotation(){return this._wrapperFields.rotation}set rotation(r){r instanceof QuaternionWrapper?this._wrapperFields.rotation.copy(r):this._wrapperFields.rotation.copy(new QuaternionWrapper(r))}copyRefObject(r){this._refObject=new TransformRefStruct(r.toObject()),this._wrapperFields.translation.copyRefObject(this._refObject.translation),this._wrapperFields.rotation.copyRefObject(this._refObject.rotation)}copy(r){this._refObject=new TransformRefStruct(r._refObject.toObject()),this._wrapperFields.translation.copy(r._wrapperFields.translation),this._wrapperFields.rotation.copy(r._wrapperFields.rotation)}static get classType(){return TransformWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"translation",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"Vector3",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"rotation",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"Quaternion",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"geometry_msgs",type:"Transform",stringUpperBound:null,isPrimitiveType:!1},msgName:"Transform"}}hasMember(r){return-1!==["translation","rotation"].indexOf(r)}}class TransformArrayWrapper{constructor(r=0){this._resize(r)}toRawROS(){return this._refObject.ref()}fill(r){const e=r.length;this._resize(e),r.forEach(((r,e)=>{r instanceof TransformWrapper?this._wrappers[e].copy(r):this._wrappers[e]=new TransformWrapper(r)}))}freeze(r){this._wrappers.forEach(((e,t)=>{e.freeze(r),this._refArray[t]=e.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to TransformArrayWrapper.size setter");return this._resize(r)}get capacity(){return this._wrappers.length}set capacity(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to TransformArrayWrapper.capacity setter");return this._resize(r)}get refObject(){return this._refObject}_resize(r){if(r<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new TransformRefArray(r),this._refObject=new TransformRefStructArray,this._refObject.size=r,this._refObject.capacity=r,this._wrappers=new Array;for(let e=0;e<r;e++)this._wrappers.push(new TransformWrapper)}copyRefObject(r){this._refObject=r;let e=this._refObject.data;e.length=this._refObject.size,this._resize(this._refObject.size);for(let r=0;r<this._refObject.size;r++)this._wrappers[r].copyRefObject(e[r])}copy(r){if(!(r instanceof TransformArrayWrapper))throw new TypeError('Invalid argument: should provide "TransformArrayWrapper".');this._resize(r.size),r._wrappers.forEach(((r,e)=>{this._wrappers[e].copy(r)}))}static freeArray(r){let e=r.data;e.length=r.size;for(let t=0;t<r.size;t++)TransformWrapper.freeStruct(e[t])}static get elementType(){return TransformWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return TransformArrayWrapper}toPlainObject(r){return translator.toPlainObject(this,r)}}module.exports=TransformWrapper;