"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),Int32Wrapper=require("../../generated/std_msgs/std_msgs__msg__Int32.js"),Fibonacci_ResultRefStruct=StructType({sequence:Int32Wrapper.refObjectArrayType}),Fibonacci_ResultRefArray=ArrayType(Fibonacci_ResultRefStruct),Fibonacci_ResultRefStructArray=StructType({data:Fibonacci_ResultRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class Fibonacci_ResultWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new Fibonacci_ResultRefStruct(e._refObject.toObject()),this._wrapperFields.sequence=Int32Wrapper.createArray(),this._wrapperFields.sequence.copy(e._wrapperFields.sequence)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new Fibonacci_ResultRefStruct,this._wrapperFields.sequence=Int32Wrapper.createArray()}static createFromRefObject(e){let r=new Fibonacci_ResultWrapper;return r.copyRefObject(e),r}static createArray(){return new Fibonacci_ResultArrayWrapper}static get ArrayType(){return Fibonacci_ResultArrayWrapper}static get refObjectArrayType(){return Fibonacci_ResultRefStructArray}static get refObjectType(){return Fibonacci_ResultRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.sequence.fill(Int32Array.from([])),this._wrapperFields.sequence.freeze(e),this._refObject.sequence=this._wrapperFields.sequence.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.sequence.copyRefObject(e.sequence)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){0!=e.sequence.size&&(Int32Wrapper.ArrayType.freeArray(e.sequence),Int32Wrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.sequence,Int32Wrapper.refObjectArrayType,"data"))}static destoryRawROS(e){Fibonacci_ResultWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"example_interfaces",subFolder:"action",interfaceName:"Fibonacci_Result"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get sequence(){return this._wrapperFields.sequence.data}set sequence(e){this._wrapperFields.sequence.fill(e)}copyRefObject(e){this._refObject=new Fibonacci_ResultRefStruct(e.toObject()),this._wrapperFields.sequence.copyRefObject(this._refObject.sequence)}copy(e){this._refObject=new Fibonacci_ResultRefStruct(e._refObject.toObject()),this._wrapperFields.sequence.copy(e._wrapperFields.sequence)}static get classType(){return Fibonacci_ResultWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"sequence",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:null,type:"int32",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"example_interfaces",type:"Fibonacci_Result",stringUpperBound:null,isPrimitiveType:!1},msgName:"Fibonacci_Result"}}hasMember(e){return-1!==["sequence"].indexOf(e)}}class Fibonacci_ResultArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof Fibonacci_ResultWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new Fibonacci_ResultWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to Fibonacci_ResultArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to Fibonacci_ResultArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new Fibonacci_ResultRefArray(e),this._refObject=new Fibonacci_ResultRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new Fibonacci_ResultWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof Fibonacci_ResultArrayWrapper))throw new TypeError('Invalid argument: should provide "Fibonacci_ResultArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)Fibonacci_ResultWrapper.freeStruct(r[t])}static get elementType(){return Fibonacci_ResultWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return Fibonacci_ResultArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=Fibonacci_ResultWrapper;