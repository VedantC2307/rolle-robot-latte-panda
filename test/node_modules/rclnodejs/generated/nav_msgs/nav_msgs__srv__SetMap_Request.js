"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),OccupancyGridWrapper=require("../../generated/nav_msgs/nav_msgs__msg__OccupancyGrid.js"),PoseWithCovarianceStampedWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__PoseWithCovarianceStamped.js"),SetMap_RequestRefStruct=StructType({map:OccupancyGridWrapper.refObjectType,initial_pose:PoseWithCovarianceStampedWrapper.refObjectType}),SetMap_RequestRefArray=ArrayType(SetMap_RequestRefStruct),SetMap_RequestRefStructArray=StructType({data:SetMap_RequestRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class SetMap_RequestWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new SetMap_RequestRefStruct(e._refObject.toObject()),this._wrapperFields.map=new OccupancyGridWrapper(e._wrapperFields.map),this._wrapperFields.initial_pose=new PoseWithCovarianceStampedWrapper(e._wrapperFields.initial_pose)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new SetMap_RequestRefStruct,this._wrapperFields.map=new OccupancyGridWrapper,this._wrapperFields.initial_pose=new PoseWithCovarianceStampedWrapper}static createFromRefObject(e){let r=new SetMap_RequestWrapper;return r.copyRefObject(e),r}static createArray(){return new SetMap_RequestArrayWrapper}static get ArrayType(){return SetMap_RequestArrayWrapper}static get refObjectArrayType(){return SetMap_RequestRefStructArray}static get refObjectType(){return SetMap_RequestRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._wrapperFields.map.freeze(e),this._refObject.map=this._wrapperFields.map.refObject,this._wrapperFields.initial_pose.freeze(e),this._refObject.initial_pose=this._wrapperFields.initial_pose.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.map.copyRefObject(e.map),this._wrapperFields.initial_pose.copyRefObject(e.initial_pose)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){OccupancyGridWrapper.freeStruct(e.map),PoseWithCovarianceStampedWrapper.freeStruct(e.initial_pose)}static destoryRawROS(e){SetMap_RequestWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"nav_msgs",subFolder:"srv",interfaceName:"SetMap_Request"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get map(){return this._wrapperFields.map}set map(e){e instanceof OccupancyGridWrapper?this._wrapperFields.map.copy(e):this._wrapperFields.map.copy(new OccupancyGridWrapper(e))}get initial_pose(){return this._wrapperFields.initial_pose}set initial_pose(e){e instanceof PoseWithCovarianceStampedWrapper?this._wrapperFields.initial_pose.copy(e):this._wrapperFields.initial_pose.copy(new PoseWithCovarianceStampedWrapper(e))}copyRefObject(e){this._refObject=new SetMap_RequestRefStruct(e.toObject()),this._wrapperFields.map.copyRefObject(this._refObject.map),this._wrapperFields.initial_pose.copyRefObject(this._refObject.initial_pose)}copy(e){this._refObject=new SetMap_RequestRefStruct(e._refObject.toObject()),this._wrapperFields.map.copy(e._wrapperFields.map),this._wrapperFields.initial_pose.copy(e._wrapperFields.initial_pose)}static get classType(){return SetMap_RequestWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"map",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"nav_msgs",type:"OccupancyGrid",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"initial_pose",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"PoseWithCovarianceStamped",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"nav_msgs",type:"SetMap_Request",stringUpperBound:null,isPrimitiveType:!1},msgName:"SetMap_Request"}}hasMember(e){return-1!==["map","initial_pose"].indexOf(e)}}class SetMap_RequestArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof SetMap_RequestWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new SetMap_RequestWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SetMap_RequestArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to SetMap_RequestArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new SetMap_RequestRefArray(e),this._refObject=new SetMap_RequestRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new SetMap_RequestWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof SetMap_RequestArrayWrapper))throw new TypeError('Invalid argument: should provide "SetMap_RequestArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)SetMap_RequestWrapper.freeStruct(r[t])}static get elementType(){return SetMap_RequestWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return SetMap_RequestArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=SetMap_RequestWrapper;