"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),UInt8Wrapper=require("../../generated/std_msgs/std_msgs__msg__UInt8.js"),UUIDRefStruct=StructType({uuid:ArrayType(primitiveTypes.uint8,16)}),UUIDRefArray=ArrayType(UUIDRefStruct),UUIDRefStructArray=StructType({data:UUIDRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class UUIDWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new UUIDRefStruct(e._refObject.toObject()),this._wrapperFields.uuid=UInt8Wrapper.createArray(),this._wrapperFields.uuid.copy(e._wrapperFields.uuid)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new UUIDRefStruct,this._wrapperFields.uuid=UInt8Wrapper.createArray()}static createFromRefObject(e){let r=new UUIDWrapper;return r.copyRefObject(e),r}static createArray(){return new UUIDArrayWrapper}static get ArrayType(){return UUIDArrayWrapper}static get refObjectArrayType(){return UUIDRefStructArray}static get refObjectType(){return UUIDRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._refObject.uuid=Array.from(this._wrapperFields.uuid.data)}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.uuid.fill(e.uuid.toArray())}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){}static destoryRawROS(e){UUIDWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"unique_identifier_msgs",subFolder:"msg",interfaceName:"UUID"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get uuid(){return this._wrapperFields.uuid.data}set uuid(e){if(16!==e.length)throw new RangeError("The length of the array must be 16.");this._wrapperFields.uuid.fill(e)}copyRefObject(e){this._refObject=new UUIDRefStruct(e.toObject()),this._wrapperFields.uuid.fill(e.uuid.toArray())}copy(e){this._refObject=new UUIDRefStruct(e._refObject.toObject()),this._wrapperFields.uuid.copy(e._wrapperFields.uuid)}static get classType(){return UUIDWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"uuid",type:{isArray:!0,arraySize:16,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!0,pkgName:null,type:"uint8",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"unique_identifier_msgs",type:"UUID",stringUpperBound:null,isPrimitiveType:!1},msgName:"UUID"}}hasMember(e){return-1!==["uuid"].indexOf(e)}}class UUIDArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof UUIDWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new UUIDWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to UUIDArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to UUIDArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new UUIDRefArray(e),this._refObject=new UUIDRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new UUIDWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof UUIDArrayWrapper))throw new TypeError('Invalid argument: should provide "UUIDArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)UUIDWrapper.freeStruct(r[t])}static get elementType(){return UUIDWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return UUIDArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=UUIDWrapper;