"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),StringWrapper=require("../../generated/std_msgs/std_msgs__msg__String.js"),Float32Wrapper=require("../../generated/std_msgs/std_msgs__msg__Float32.js"),ChannelFloat32RefStruct=StructType({name:primitiveTypes.string,values:Float32Wrapper.refObjectArrayType}),ChannelFloat32RefArray=ArrayType(ChannelFloat32RefStruct),ChannelFloat32RefStructArray=StructType({data:ChannelFloat32RefArray,size:ref.types.size_t,capacity:ref.types.size_t});class ChannelFloat32Wrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new ChannelFloat32RefStruct(e._refObject.toObject()),this._wrapperFields.name=new StringWrapper(e._wrapperFields.name),this._wrapperFields.values=Float32Wrapper.createArray(),this._wrapperFields.values.copy(e._wrapperFields.values)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new ChannelFloat32RefStruct,this._wrapperFields.name=new StringWrapper,this._wrapperFields.values=Float32Wrapper.createArray()}static createFromRefObject(e){let r=new ChannelFloat32Wrapper;return r.copyRefObject(e),r}static createArray(){return new ChannelFloat32ArrayWrapper}static get ArrayType(){return ChannelFloat32ArrayWrapper}static get refObjectArrayType(){return ChannelFloat32RefStructArray}static get refObjectType(){return ChannelFloat32RefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.name.freeze(e),this._refObject.name=this._wrapperFields.name.refObject,e&&this._wrapperFields.values.fill(Float32Array.from([])),this._wrapperFields.values.freeze(e),this._refObject.values=this._wrapperFields.values.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.name.data=e.name.data,this._wrapperFields.values.copyRefObject(e.values)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){StringWrapper.freeStruct(e.name),0!=e.values.size&&(Float32Wrapper.ArrayType.freeArray(e.values),Float32Wrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.values,Float32Wrapper.refObjectArrayType,"data"))}static destoryRawROS(e){ChannelFloat32Wrapper.freeStruct(e.refObject)}static type(){return{pkgName:"sensor_msgs",subFolder:"msg",interfaceName:"ChannelFloat32"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get name(){return this._wrapperFields.name.data}set name(e){this._wrapperFields.name.data=e}get values(){return this._wrapperFields.values.data}set values(e){this._wrapperFields.values.fill(e)}copyRefObject(e){this._refObject=new ChannelFloat32RefStruct(e.toObject()),this._wrapperFields.name.copyRefObject(this._refObject.name),this._wrapperFields.values.copyRefObject(this._refObject.values)}copy(e){this._refObject=new ChannelFloat32RefStruct(e._refObject.toObject()),this._wrapperFields.name.copy(e._wrapperFields.name),this._wrapperFields.values.copy(e._wrapperFields.values)}static get classType(){return ChannelFloat32Wrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"name",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"string",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"values",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:null,type:"float32",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"sensor_msgs",type:"ChannelFloat32",stringUpperBound:null,isPrimitiveType:!1},msgName:"ChannelFloat32"}}hasMember(e){return-1!==["name","values"].indexOf(e)}}class ChannelFloat32ArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof ChannelFloat32Wrapper?this._wrappers[r].copy(e):this._wrappers[r]=new ChannelFloat32Wrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to ChannelFloat32ArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to ChannelFloat32ArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new ChannelFloat32RefArray(e),this._refObject=new ChannelFloat32RefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new ChannelFloat32Wrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof ChannelFloat32ArrayWrapper))throw new TypeError('Invalid argument: should provide "ChannelFloat32ArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)ChannelFloat32Wrapper.freeStruct(r[t])}static get elementType(){return ChannelFloat32Wrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return ChannelFloat32ArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=ChannelFloat32Wrapper;