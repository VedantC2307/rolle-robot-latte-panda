"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),StringWrapper=require("../../generated/std_msgs/std_msgs__msg__String.js"),VisionClassRefStruct=StructType({class_id:primitiveTypes.uint16,class_name:primitiveTypes.string}),VisionClassRefArray=ArrayType(VisionClassRefStruct),VisionClassRefStructArray=StructType({data:VisionClassRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class VisionClassWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new VisionClassRefStruct(e._refObject.toObject()),this._wrapperFields.class_name=new StringWrapper(e._wrapperFields.class_name)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new VisionClassRefStruct,this._wrapperFields.class_name=new StringWrapper}static createFromRefObject(e){let r=new VisionClassWrapper;return r.copyRefObject(e),r}static createArray(){return new VisionClassArrayWrapper}static get ArrayType(){return VisionClassArrayWrapper}static get refObjectArrayType(){return VisionClassRefStructArray}static get refObjectType(){return VisionClassRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.class_name.freeze(e),this._refObject.class_name=this._wrapperFields.class_name.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._refObject.class_id=e.class_id,this._wrapperFields.class_name.data=e.class_name.data}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){StringWrapper.freeStruct(e.class_name)}static destoryRawROS(e){VisionClassWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"vision_msgs",subFolder:"msg",interfaceName:"VisionClass"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get class_id(){return this._refObject.class_id}set class_id(e){this._refObject.class_id=e}get class_name(){return this._wrapperFields.class_name.data}set class_name(e){this._wrapperFields.class_name.data=e}copyRefObject(e){this._refObject=new VisionClassRefStruct(e.toObject()),this._wrapperFields.class_name.copyRefObject(this._refObject.class_name)}copy(e){this._refObject=new VisionClassRefStruct(e._refObject.toObject()),this._wrapperFields.class_name.copy(e._wrapperFields.class_name)}static get classType(){return VisionClassWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"class_id",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint16",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"class_name",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"string",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"vision_msgs",type:"VisionClass",stringUpperBound:null,isPrimitiveType:!1},msgName:"VisionClass"}}hasMember(e){return-1!==["class_id","class_name"].indexOf(e)}}class VisionClassArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof VisionClassWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new VisionClassWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,s)=>{r.freeze(e),this._refArray[s]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to VisionClassArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to VisionClassArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new VisionClassRefArray(e),this._refObject=new VisionClassRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new VisionClassWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof VisionClassArrayWrapper))throw new TypeError('Invalid argument: should provide "VisionClassArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let s=0;s<e.size;s++)VisionClassWrapper.freeStruct(r[s])}static get elementType(){return VisionClassWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return VisionClassArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=VisionClassWrapper;