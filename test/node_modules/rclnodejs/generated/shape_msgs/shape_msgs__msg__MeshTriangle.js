"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),UInt32Wrapper=require("../../generated/std_msgs/std_msgs__msg__UInt32.js"),MeshTriangleRefStruct=StructType({vertex_indices:ArrayType(primitiveTypes.uint32,3)}),MeshTriangleRefArray=ArrayType(MeshTriangleRefStruct),MeshTriangleRefStructArray=StructType({data:MeshTriangleRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class MeshTriangleWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new MeshTriangleRefStruct(e._refObject.toObject()),this._wrapperFields.vertex_indices=UInt32Wrapper.createArray(),this._wrapperFields.vertex_indices.copy(e._wrapperFields.vertex_indices)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new MeshTriangleRefStruct,this._wrapperFields.vertex_indices=UInt32Wrapper.createArray()}static createFromRefObject(e){let r=new MeshTriangleWrapper;return r.copyRefObject(e),r}static createArray(){return new MeshTriangleArrayWrapper}static get ArrayType(){return MeshTriangleArrayWrapper}static get refObjectArrayType(){return MeshTriangleRefStructArray}static get refObjectType(){return MeshTriangleRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){this._refObject.vertex_indices=Array.from(this._wrapperFields.vertex_indices.data)}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._wrapperFields.vertex_indices.fill(e.vertex_indices.toArray())}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){}static destoryRawROS(e){MeshTriangleWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"shape_msgs",subFolder:"msg",interfaceName:"MeshTriangle"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get vertex_indices(){return this._wrapperFields.vertex_indices.data}set vertex_indices(e){if(3!==e.length)throw new RangeError("The length of the array must be 3.");this._wrapperFields.vertex_indices.fill(e)}copyRefObject(e){this._refObject=new MeshTriangleRefStruct(e.toObject()),this._wrapperFields.vertex_indices.fill(e.vertex_indices.toArray())}copy(e){this._refObject=new MeshTriangleRefStruct(e._refObject.toObject()),this._wrapperFields.vertex_indices.copy(e._wrapperFields.vertex_indices)}static get classType(){return MeshTriangleWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"vertex_indices",type:{isArray:!0,arraySize:3,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!0,pkgName:null,type:"uint32",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"shape_msgs",type:"MeshTriangle",stringUpperBound:null,isPrimitiveType:!1},msgName:"MeshTriangle"}}hasMember(e){return-1!==["vertex_indices"].indexOf(e)}}class MeshTriangleArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof MeshTriangleWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new MeshTriangleWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MeshTriangleArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to MeshTriangleArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new MeshTriangleRefArray(e),this._refObject=new MeshTriangleRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new MeshTriangleWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof MeshTriangleArrayWrapper))throw new TypeError('Invalid argument: should provide "MeshTriangleArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)MeshTriangleWrapper.freeStruct(r[t])}static get elementType(){return MeshTriangleWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return MeshTriangleArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=MeshTriangleWrapper;