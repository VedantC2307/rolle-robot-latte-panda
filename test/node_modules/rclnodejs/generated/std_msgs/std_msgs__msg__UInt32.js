"use strict";const rclnodejs=require("bindings")("rclnodejs"),ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),UInt32RefStruct=StructType({data:primitiveTypes.uint32}),UInt32RefArray=ArrayType(UInt32RefStruct),UInt32RefStructArray=StructType({data:ref.refType(ref.types.uint32),size:ref.types.size_t,capacity:ref.types.size_t});class UInt32Wrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?this._refObject=new UInt32RefStruct(e._refObject.toObject()):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new UInt32RefStruct}static createFromRefObject(e){let r=new UInt32Wrapper;return r.copyRefObject(e),r}static createArray(){return new UInt32ArrayWrapper}static get ArrayType(){return UInt32ArrayWrapper}static get refObjectArrayType(){return UInt32RefStructArray}static get refObjectType(){return UInt32RefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._refObject.data=e.data}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){}static destoryRawROS(e){UInt32Wrapper.freeStruct(e.refObject)}static type(){return{pkgName:"std_msgs",subFolder:"msg",interfaceName:"UInt32"}}static isPrimitive(){return!0}static get isROSArray(){return!1}get refObject(){return this._refObject}get data(){return this._refObject.data}set data(e){this._refObject.data=e}copyRefObject(e){this._refObject=new UInt32RefStruct(e.toObject())}copy(e){this._refObject=new UInt32RefStruct(e._refObject.toObject())}static get classType(){return UInt32Wrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"data",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint32",stringUpperBound:null,isPrimitiveType:!0},default_value:null}],baseType:{pkgName:"std_msgs",type:"UInt32",stringUpperBound:null,isPrimitiveType:!1},msgName:"UInt32"}}hasMember(e){return-1!==["data"].indexOf(e)}}class UInt32ArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){Array.isArray(e)?this._wrappers=new Uint32Array(e):this._wrappers=e}freeze(e){if(this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity)this._refObject.data=null;else{const e=Buffer.from(new Uint8Array(this._wrappers.buffer));this._refObject.data=e}}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to UInt32ArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to UInt32ArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=void 0,this._refObject=new UInt32RefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Uint32Array(e)}copyRefObject(e){this._refObject=e;const r=e.size*ref.types.uint32.size,t=0!==e.data.length?rclnodejs.createArrayBufferFromAddress(e.data.hexAddress(),r):Buffer.alloc(0);this._wrappers=new Uint32Array(t)}copy(e){if(!(e instanceof UInt32ArrayWrapper))throw new TypeError('Invalid argument: should provide "UInt32ArrayWrapper".');this._resize(e.size),this._wrappers=e._wrappers.slice()}static freeArray(e){}static get elementType(){return UInt32Wrapper}static get isROSArray(){return!0}static get useTypedArray(){return!0}get classType(){return UInt32ArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=UInt32Wrapper;