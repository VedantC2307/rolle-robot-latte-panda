"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),InteractiveMarkerWrapper=require("../../generated/visualization_msgs/visualization_msgs__msg__InteractiveMarker.js"),GetInteractiveMarkers_ResponseRefStruct=StructType({sequence_number:primitiveTypes.uint64,markers:InteractiveMarkerWrapper.refObjectArrayType}),GetInteractiveMarkers_ResponseRefArray=ArrayType(GetInteractiveMarkers_ResponseRefStruct),GetInteractiveMarkers_ResponseRefStructArray=StructType({data:GetInteractiveMarkers_ResponseRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class GetInteractiveMarkers_ResponseWrapper{constructor(e){this._initialize(),this._setDefaults(),"object"==typeof e&&e._refObject?(this._refObject=new GetInteractiveMarkers_ResponseRefStruct(e._refObject.toObject()),this._wrapperFields.markers=InteractiveMarkerWrapper.createArray(),this._wrapperFields.markers.copy(e._wrapperFields.markers)):void 0!==e&&translator.constructFromPlanObject(this,e),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new GetInteractiveMarkers_ResponseRefStruct,this._wrapperFields.markers=InteractiveMarkerWrapper.createArray()}static createFromRefObject(e){let r=new GetInteractiveMarkers_ResponseWrapper;return r.copyRefObject(e),r}static createArray(){return new GetInteractiveMarkers_ResponseArrayWrapper}static get ArrayType(){return GetInteractiveMarkers_ResponseArrayWrapper}static get refObjectArrayType(){return GetInteractiveMarkers_ResponseRefStructArray}static get refObjectType(){return GetInteractiveMarkers_ResponseRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(e){e&&this._wrapperFields.markers.fill([]),this._wrapperFields.markers.freeze(e),this._refObject.markers=this._wrapperFields.markers.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(e){this._refObject.sequence_number=e.sequence_number,this._wrapperFields.markers.copyRefObject(e.markers)}toPlainObject(e){return translator.toPlainObject(this,e)}static freeStruct(e){0!=e.markers.size&&(InteractiveMarkerWrapper.ArrayType.freeArray(e.markers),InteractiveMarkerWrapper.ArrayType.useTypedArray||deallocator.freeStructMember(e.markers,InteractiveMarkerWrapper.refObjectArrayType,"data"))}static destoryRawROS(e){GetInteractiveMarkers_ResponseWrapper.freeStruct(e.refObject)}static type(){return{pkgName:"visualization_msgs",subFolder:"srv",interfaceName:"GetInteractiveMarkers_Response"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get sequence_number(){return BigInt(this._refObject.sequence_number)}set sequence_number(e){if("bigint"!=typeof e)throw new TypeError("sequence_number must be type of bigint");this._refObject.sequence_number=e.toString()}get markers(){return this._wrapperFields.markers}set markers(e){this._wrapperFields.markers.fill(e)}copyRefObject(e){this._refObject=new GetInteractiveMarkers_ResponseRefStruct(e.toObject()),this._wrapperFields.markers.copyRefObject(this._refObject.markers)}copy(e){this._refObject=new GetInteractiveMarkers_ResponseRefStruct(e._refObject.toObject()),this._wrapperFields.markers.copy(e._wrapperFields.markers)}static get classType(){return GetInteractiveMarkers_ResponseWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"sequence_number",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:null,type:"uint64",stringUpperBound:null,isPrimitiveType:!0},default_value:null},{name:"markers",type:{isArray:!0,arraySize:null,isUpperBound:!1,isDynamicArray:!0,isFixedSizeArray:null,pkgName:"visualization_msgs",type:"InteractiveMarker",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"visualization_msgs",type:"GetInteractiveMarkers_Response",stringUpperBound:null,isPrimitiveType:!1},msgName:"GetInteractiveMarkers_Response"}}hasMember(e){return-1!==["sequence_number","markers"].indexOf(e)}}class GetInteractiveMarkers_ResponseArrayWrapper{constructor(e=0){this._resize(e)}toRawROS(){return this._refObject.ref()}fill(e){const r=e.length;this._resize(r),e.forEach(((e,r)=>{e instanceof GetInteractiveMarkers_ResponseWrapper?this._wrappers[r].copy(e):this._wrappers[r]=new GetInteractiveMarkers_ResponseWrapper(e)}))}freeze(e){this._wrappers.forEach(((r,t)=>{r.freeze(e),this._refArray[t]=r.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to GetInteractiveMarkers_ResponseArrayWrapper.size setter");return this._resize(e)}get capacity(){return this._wrappers.length}set capacity(e){if("number"!=typeof e)throw new TypeError("Invalid argument: should provide a number to GetInteractiveMarkers_ResponseArrayWrapper.capacity setter");return this._resize(e)}get refObject(){return this._refObject}_resize(e){if(e<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new GetInteractiveMarkers_ResponseRefArray(e),this._refObject=new GetInteractiveMarkers_ResponseRefStructArray,this._refObject.size=e,this._refObject.capacity=e,this._wrappers=new Array;for(let r=0;r<e;r++)this._wrappers.push(new GetInteractiveMarkers_ResponseWrapper)}copyRefObject(e){this._refObject=e;let r=this._refObject.data;r.length=this._refObject.size,this._resize(this._refObject.size);for(let e=0;e<this._refObject.size;e++)this._wrappers[e].copyRefObject(r[e])}copy(e){if(!(e instanceof GetInteractiveMarkers_ResponseArrayWrapper))throw new TypeError('Invalid argument: should provide "GetInteractiveMarkers_ResponseArrayWrapper".');this._resize(e.size),e._wrappers.forEach(((e,r)=>{this._wrappers[r].copy(e)}))}static freeArray(e){let r=e.data;r.length=e.size;for(let t=0;t<e.size;t++)GetInteractiveMarkers_ResponseWrapper.freeStruct(r[t])}static get elementType(){return GetInteractiveMarkers_ResponseWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return GetInteractiveMarkers_ResponseArrayWrapper}toPlainObject(e){return translator.toPlainObject(this,e)}}module.exports=GetInteractiveMarkers_ResponseWrapper;