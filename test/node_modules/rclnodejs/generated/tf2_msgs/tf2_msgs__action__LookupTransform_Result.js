"use strict";const ref=require("@rclnodejs/ref-napi"),StructType=require("@rclnodejs/ref-struct-di")(ref),ArrayType=require("@rclnodejs/ref-array-di")(ref),primitiveTypes=require("../../rosidl_gen/primitive_types.js"),deallocator=require("../../rosidl_gen/deallocator.js"),translator=require("../../rosidl_gen/message_translator.js"),TransformStampedWrapper=require("../../generated/geometry_msgs/geometry_msgs__msg__TransformStamped.js"),TF2ErrorWrapper=require("../../generated/tf2_msgs/tf2_msgs__msg__TF2Error.js"),LookupTransform_ResultRefStruct=StructType({transform:TransformStampedWrapper.refObjectType,error:TF2ErrorWrapper.refObjectType}),LookupTransform_ResultRefArray=ArrayType(LookupTransform_ResultRefStruct),LookupTransform_ResultRefStructArray=StructType({data:LookupTransform_ResultRefArray,size:ref.types.size_t,capacity:ref.types.size_t});class LookupTransform_ResultWrapper{constructor(r){this._initialize(),this._setDefaults(),"object"==typeof r&&r._refObject?(this._refObject=new LookupTransform_ResultRefStruct(r._refObject.toObject()),this._wrapperFields.transform=new TransformStampedWrapper(r._wrapperFields.transform),this._wrapperFields.error=new TF2ErrorWrapper(r._wrapperFields.error)):void 0!==r&&translator.constructFromPlanObject(this,r),this.freeze(!1)}_setDefaults(){}_initialize(){this._wrapperFields={},this._refObject=new LookupTransform_ResultRefStruct,this._wrapperFields.transform=new TransformStampedWrapper,this._wrapperFields.error=new TF2ErrorWrapper}static createFromRefObject(r){let e=new LookupTransform_ResultWrapper;return e.copyRefObject(r),e}static createArray(){return new LookupTransform_ResultArrayWrapper}static get ArrayType(){return LookupTransform_ResultArrayWrapper}static get refObjectArrayType(){return LookupTransform_ResultRefStructArray}static get refObjectType(){return LookupTransform_ResultRefStruct}toRawROS(){return this.freeze(!0),this._refObject.ref()}freeze(r){this._wrapperFields.transform.freeze(r),this._refObject.transform=this._wrapperFields.transform.refObject,this._wrapperFields.error.freeze(r),this._refObject.error=this._wrapperFields.error.refObject}serialize(){return this.freeze(!1),this._refObject.ref()}deserialize(r){this._wrapperFields.transform.copyRefObject(r.transform),this._wrapperFields.error.copyRefObject(r.error)}toPlainObject(r){return translator.toPlainObject(this,r)}static freeStruct(r){TransformStampedWrapper.freeStruct(r.transform),TF2ErrorWrapper.freeStruct(r.error)}static destoryRawROS(r){LookupTransform_ResultWrapper.freeStruct(r.refObject)}static type(){return{pkgName:"tf2_msgs",subFolder:"action",interfaceName:"LookupTransform_Result"}}static isPrimitive(){return!1}static get isROSArray(){return!1}get refObject(){return this._refObject}get transform(){return this._wrapperFields.transform}set transform(r){r instanceof TransformStampedWrapper?this._wrapperFields.transform.copy(r):this._wrapperFields.transform.copy(new TransformStampedWrapper(r))}get error(){return this._wrapperFields.error}set error(r){r instanceof TF2ErrorWrapper?this._wrapperFields.error.copy(r):this._wrapperFields.error.copy(new TF2ErrorWrapper(r))}copyRefObject(r){this._refObject=new LookupTransform_ResultRefStruct(r.toObject()),this._wrapperFields.transform.copyRefObject(this._refObject.transform),this._wrapperFields.error.copyRefObject(this._refObject.error)}copy(r){this._refObject=new LookupTransform_ResultRefStruct(r._refObject.toObject()),this._wrapperFields.transform.copy(r._wrapperFields.transform),this._wrapperFields.error.copy(r._wrapperFields.error)}static get classType(){return LookupTransform_ResultWrapper}static get ROSMessageDef(){return{constants:[],fields:[{name:"transform",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"geometry_msgs",type:"TransformStamped",stringUpperBound:null,isPrimitiveType:!1},default_value:null},{name:"error",type:{isArray:!1,arraySize:null,isUpperBound:!1,isDynamicArray:!1,isFixedSizeArray:!1,pkgName:"tf2_msgs",type:"TF2Error",stringUpperBound:null,isPrimitiveType:!1},default_value:null}],baseType:{pkgName:"tf2_msgs",type:"LookupTransform_Result",stringUpperBound:null,isPrimitiveType:!1},msgName:"LookupTransform_Result"}}hasMember(r){return-1!==["transform","error"].indexOf(r)}}class LookupTransform_ResultArrayWrapper{constructor(r=0){this._resize(r)}toRawROS(){return this._refObject.ref()}fill(r){const e=r.length;this._resize(e),r.forEach(((r,e)=>{r instanceof LookupTransform_ResultWrapper?this._wrappers[e].copy(r):this._wrappers[e]=new LookupTransform_ResultWrapper(r)}))}freeze(r){this._wrappers.forEach(((e,t)=>{e.freeze(r),this._refArray[t]=e.refObject})),this._refObject.size=this._wrappers.length,this._refObject.capacity=this._wrappers.length,0===this._refObject.capacity?this._refObject.data=null:this._refObject.data=this._refArray.buffer}get refObject(){return this._refObject}get data(){return this._wrappers}get size(){return this._wrappers.length}set size(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to LookupTransform_ResultArrayWrapper.size setter");return this._resize(r)}get capacity(){return this._wrappers.length}set capacity(r){if("number"!=typeof r)throw new TypeError("Invalid argument: should provide a number to LookupTransform_ResultArrayWrapper.capacity setter");return this._resize(r)}get refObject(){return this._refObject}_resize(r){if(r<0)throw new RangeError("Invalid argument: should provide a positive number");this._refArray=new LookupTransform_ResultRefArray(r),this._refObject=new LookupTransform_ResultRefStructArray,this._refObject.size=r,this._refObject.capacity=r,this._wrappers=new Array;for(let e=0;e<r;e++)this._wrappers.push(new LookupTransform_ResultWrapper)}copyRefObject(r){this._refObject=r;let e=this._refObject.data;e.length=this._refObject.size,this._resize(this._refObject.size);for(let r=0;r<this._refObject.size;r++)this._wrappers[r].copyRefObject(e[r])}copy(r){if(!(r instanceof LookupTransform_ResultArrayWrapper))throw new TypeError('Invalid argument: should provide "LookupTransform_ResultArrayWrapper".');this._resize(r.size),r._wrappers.forEach(((r,e)=>{this._wrappers[e].copy(r)}))}static freeArray(r){let e=r.data;e.length=r.size;for(let t=0;t<r.size;t++)LookupTransform_ResultWrapper.freeStruct(e[t])}static get elementType(){return LookupTransform_ResultWrapper}static get isROSArray(){return!0}static get useTypedArray(){return!1}get classType(){return LookupTransform_ResultArrayWrapper}toPlainObject(r){return translator.toPlainObject(this,r)}}module.exports=LookupTransform_ResultWrapper;